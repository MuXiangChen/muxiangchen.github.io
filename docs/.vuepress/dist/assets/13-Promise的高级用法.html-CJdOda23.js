import{_ as s,c as a,e,o as p}from"./app-gihhjKhR.js";const t={};function i(l,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="_13-promise的高级用法" tabindex="-1"><a class="header-anchor" href="#_13-promise的高级用法"><span>13-Promise的高级用法</span></a></h1><h2 id="node-js-中的util-promisify-方法" tabindex="-1"><a class="header-anchor" href="#node-js-中的util-promisify-方法"><span>Node.js 中的util.promisify()方法</span></a></h2><p>Node.js 中有一个内置的方法 util.promisify()，它可以很方便地将 ES5回调函数写法的方法，转成Promise写法的方法。就不需要我们手动封装Promise了。</p><p>代码举例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 引入 util 模块</span></span>
<span class="line"><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 引入 fs 模块</span></span>
<span class="line"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 返回一个新的函数，这个函数是一个 Promise 对象</span></span>
<span class="line"><span class="token keyword">const</span> readFilePromise <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">readFilePromise</span><span class="token punctuation">(</span><span class="token string">&#39;readme.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res:&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-promise-封装定时器-实现延迟函数" tabindex="-1"><a class="header-anchor" href="#使用-promise-封装定时器-实现延迟函数"><span>使用 Promise 封装定时器，实现延迟函数</span></a></h2><p>代码举例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 方法：XX秒后执行指定的代码。这个方法，就是在宏任务（定时器）的执行过程中，创建了一个微任务（resolve）</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">delaySeconds</span><span class="token punctuation">(</span><span class="token parameter">delay <span class="token operator">=</span> <span class="token number">1000</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">delaySeconds</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;qiangu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">delaySeconds</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;yihao&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 2秒后打印：</span></span>
<span class="line">qiangu</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 再等3秒后打印：</span></span>
<span class="line">yihao</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="请求重试" tabindex="-1"><a class="header-anchor" href="#请求重试"><span>请求重试</span></a></h2><p>参考链接：</p><ul><li>网络请求失败自动重试 js 重试机制：https://blog.csdn.net/Seasons_in_your_sun/article/details/126468481</li></ul>`,13)]))}const c=s(t,[["render",i],["__file","13-Promise的高级用法.html.vue"]]),u=JSON.parse('{"path":"/Frontend/06-JavaScript%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/13-Promise%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95.html","title":"13-Promise的高级用法","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Node.js 中的util.promisify()方法","slug":"node-js-中的util-promisify-方法","link":"#node-js-中的util-promisify-方法","children":[]},{"level":2,"title":"使用 Promise 封装定时器，实现延迟函数","slug":"使用-promise-封装定时器-实现延迟函数","link":"#使用-promise-封装定时器-实现延迟函数","children":[]},{"level":2,"title":"请求重试","slug":"请求重试","link":"#请求重试","children":[]}],"git":{"updatedTime":1735791502000,"contributors":[{"name":"Jasmine Mo","username":"Jasmine Mo","email":"loxluthor@gmail.com","commits":2,"url":"https://github.com/Jasmine Mo"}]},"filePathRelative":"Frontend/06-JavaScript基础：异步编程/13-Promise的高级用法.md"}');export{c as comp,u as data};
