import{_ as l,c as p,e as i,a as n,f as a,b as t,d as c,r as o,o as r}from"./app-gihhjKhR.js";const d={};function u(v,s){const e=o("font");return r(),p("div",null,[s[7]||(s[7]=i(`<h2 id="css-预处理器" tabindex="-1"><a class="header-anchor" href="#css-预处理器"><span>CSS 预处理器</span></a></h2><h3 id="为什么要有-css-预处理器" tabindex="-1"><a class="header-anchor" href="#为什么要有-css-预处理器"><span>为什么要有 CSS 预处理器</span></a></h3><p><strong>CSS基本上是设计师的工具，不是程序员的工具</strong>。在程序员的眼里，CSS是很头痛的事情，它并不像其它程序语言，比如说PHP、Javascript等等，有自己的变量、常量、条件语句以及一些编程语法，只是一行行单纯的属性描述，写起来相当的费事，而且代码难以组织和维护。</p><p>很自然的，有人就开始在想，能不能给CSS像其他程序语言一样，加入一些编程元素，让CSS能像其他程序语言一样可以做一些预定的处理。这样一来，就有了“<strong>CSS预处器</strong>（CSS Preprocessor）”。</p><h3 id="什么是-css-预处理器" tabindex="-1"><a class="header-anchor" href="#什么是-css-预处理器"><span>什么是 CSS 预处理器</span></a></h3><ul><li>是 CSS 语言的<strong>超集</strong>，比CSS更丰满。</li></ul><p>CSS 预处理器定义了一种新的语言，其基本思想是：<strong>用一种专门的编程语言，为CSS增加了一些编程的特性</strong>，将CSS作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。</p><p>通俗的说，<strong>CSS预处理器用一种专门的编程语言，进行Web页面样式设计，然后再编译成正常的CSS文件</strong>，以供项目使用。CSS预处理器为CSS增加一些编程的特性，无需考虑浏览器的兼容性问题，例如你可以在CSS中使用变量、简单的逻辑程序、函数等等在编程语言中的一些基本特性，可以让你的CSS更加简洁、适应性更强、可读性更佳，更易于代码的维护等诸多好处。</p><p>CSS预处理器技术已经非常成熟，而且也涌现出了很多种不同的CSS预处理器语言，比如说：<strong>Sass（SCSS）、LESS</strong>、Stylus、Turbine、Swithch CSS、CSS Cacheer、DT CSS等。如此之多的CSS预处理器，那么“我应该选择哪种CSS预处理器？”也相应成了最近网上的一大热门话题，在Linkedin、Twitter、CSS-Trick、知乎以及各大技术论坛上，很多人为此争论不休。相比过去我们对是否应该使用CSS预处理器的话题而言，这已经是很大的进步了。</p><p>到目前为止，在众多优秀的CSS预处理器语言中就属<strong>Sass、LESS和Stylus最优秀</strong>，讨论的也多，对比的也多。本文将分别从他们产生的背景、安装、使用语法、异同等几个对比之处向你介绍这三款CSS预处理器语言。相信前端开发工程师会做出自己的选择——我要选择哪款CSS预处理器。</p><h2 id="less-的介绍" tabindex="-1"><a class="header-anchor" href="#less-的介绍"><span>less 的介绍</span></a></h2><p>less 是一款比较流行的<strong>预处理 CSS</strong>，支持变量、混合、函数、嵌套、循环等特点。</p><ul><li><p><a href="http://lesscss.org/" target="_blank" rel="noopener noreferrer">官网</a></p></li><li><p><a href="http://lesscss.cn/" target="_blank" rel="noopener noreferrer">中文网（less 文档）</a></p></li><li><p><a href="https://less.bootcss.com/" target="_blank" rel="noopener noreferrer">Bootstrap网站的 less 文档</a></p></li><li><p>推荐文章：<a href="http://www.w3cplus.com/css/less" target="_blank" rel="noopener noreferrer">http://www.w3cplus.com/css/less</a></p></li></ul><h2 id="less-的语法" tabindex="-1"><a class="header-anchor" href="#less-的语法"><span>less 的语法</span></a></h2><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h3><p>less 的注释可以有两种。</p><p>第一种注释：模板注释</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">  // 模板注释 这里的注释转换成CSS后将会删除</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>因为 less 要转换为 css才能在浏览器中使用。转换成 css 之后，这种注释会被删除（毕竟 css 不识别这种注释）。</p><p>第二种注释：CSS 注释语法</p><div class="language-less line-numbers-mode" data-highlighter="prismjs" data-ext="less" data-title="less"><pre><code><span class="line"></span>
<span class="line"><span class="token comment">/* CSS 注释语法 转换为CSS后让然保留 */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：如果在less中写注释，我们推荐写第一种注释。除非是类似于版权等内容，就采用第二种注释。</p><h3 id="定义变量" tabindex="-1"><a class="header-anchor" href="#定义变量"><span>定义变量</span></a></h3><p>我们可以把<strong>重复使用或经常修改的值</strong>定义为变量，在需要使用的地方引用这个变量即可。这样可以避免很多重复的工作量。</p><p>（1）在less文件中，定义一个变量的格式：</p><div class="language-less line-numbers-mode" data-highlighter="prismjs" data-ext="less" data-title="less"><pre><code><span class="line">@变量名<span class="token punctuation">:</span> 变量值<span class="token punctuation">;</span>        <span class="token comment">//格式</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">@bgColor<span class="token punctuation">:</span></span> #f5f5f5<span class="token punctuation">;</span>      <span class="token comment">//格式举例</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）同时，在 less 文件中引用这个变量。</p><p>最终，less文件的完整版代码如下：</p><p>main.less：</p><div class="language-less line-numbers-mode" data-highlighter="prismjs" data-ext="less" data-title="less"><pre><code><span class="line"><span class="token comment">// 定义变量</span></span>
<span class="line"><span class="token variable">@bgColor<span class="token punctuation">:</span></span> #f5f5f5<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 引用变量</span></span>
<span class="line"><span class="token selector">body</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">@bgColor</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将上面的less文件编译为 css 文件后（下一段讲less文件的编译），自动生成的代码如下：</p><p>main.css：</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css" data-title="css"><pre><code><span class="line"><span class="token selector">body</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">background-color</span><span class="token punctuation">:</span> #f5f5f5<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用嵌套" tabindex="-1"><a class="header-anchor" href="#使用嵌套"><span>使用嵌套</span></a></h3><p>在 css 中经常会用到子代选择器，效果可能是这样的：</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css" data-title="css"><pre><code><span class="line"><span class="token selector">.container</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> 1024px<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.container &gt; .row</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.container &gt; .row a</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> #f40<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.container &gt; .row a:hover</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> #f50<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码嵌套了很多层，写起来很繁琐。可如果用 less 的嵌套语法来写这段代码，就比较简洁。</p><p>嵌套的举例如下：</p><p>main.less:</p><div class="language-less line-numbers-mode" data-highlighter="prismjs" data-ext="less" data-title="less"><pre><code><span class="line"><span class="token selector">.container</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@containerWidth</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token selector">&gt; .row</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="line">    <span class="token selector">a</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">color</span><span class="token punctuation">:</span> #f40<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token selector">&amp;:hover</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">color</span><span class="token punctuation">:</span> #f50<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token selector">div</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token selector">.hello</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">background-color</span><span class="token punctuation">:</span> #00f<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将上面的less文件编译为 css 文件后，自动生成的代码如下：</p><p>main.css</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css" data-title="css"><pre><code><span class="line"><span class="token selector">.container</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">width</span><span class="token punctuation">:</span> 1024px<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.container &gt; .row</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.container &gt; .row a</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">color</span><span class="token punctuation">:</span> #f40<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.container &gt; .row a:hover</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">color</span><span class="token punctuation">:</span> #f50<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.container div</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.container div .hello</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">background-color</span><span class="token punctuation">:</span> #00f<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mixin" tabindex="-1"><a class="header-anchor" href="#mixin"><span>Mixin</span></a></h3><p>Mixin 的作用是把<strong>重复的代码</strong>放到一个类当中，每次只要引用类名，就可以引用到里面的代码了，非常方便。</p><p>（1）在 less 文件中定义一个类：（将重复的代码放到自定义的类中）</p><div class="language-less line-numbers-mode" data-highlighter="prismjs" data-ext="less" data-title="less"><pre><code><span class="line"><span class="token comment">/* 定义一个类 */</span></span>
<span class="line"><span class="token selector">.roundedCorners(<span class="token variable">@radius</span>: 5px)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> <span class="token variable">@radius</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> <span class="token variable">@radius</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token variable">@radius</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上方代码中，第一行里面，括号里的内容是参数：这个参数是<strong>缺省值</strong>。</p><p>（2）在 less 文件中引用上面这个类：</p><div class="language-less line-numbers-mode" data-highlighter="prismjs" data-ext="less" data-title="less"><pre><code><span class="line"><span class="token selector">#header</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token mixin-usage function">.roundedCorners</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">#footer</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token mixin-usage function">.roundedCorners</span><span class="token punctuation">(</span>10px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上方代码中，header 中的引用没有带参数，表示参数为缺省值； footer 中的引用带了参数，那就用这个参数。</p><h3 id="import" tabindex="-1"><a class="header-anchor" href="#import"><span>Import</span></a></h3><p>在开发阶段，我们可以将不同的样式放到多个文件中，最后通过@import 的方式合并。意思就是，当出现多个 less 文件时，怎么引用它们。</p><p>这个很好理解， css 文件可以有很多个，less文件也可以有很多个。</p><p>（1）定义一个被引用的less文件，名为<code>_button1.less</code>：</p><p><code>_button1.less:</code></p><div class="language-less line-numbers-mode" data-highlighter="prismjs" data-ext="less" data-title="less"><pre><code><span class="line"><span class="token selector">.btn</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@btnColor</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS1：被引用的less文件，我们习惯在前面加<strong>下划线</strong>，表示它是<strong>部分文件</strong>。</p><p>PS2：<code>_button1.less</code>里可以引用<code>main.css</code>里的自定义变量。</p><p>（2）在 <code>main.css</code> 中引用上面的 <code>_button1.less</code>：（代码的第二行）</p><p>main.css：</p><div class="language-less line-numbers-mode" data-highlighter="prismjs" data-ext="less" data-title="less"><pre><code><span class="line"><span class="token variable">@btnColor<span class="token punctuation">:</span></span> red<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">@import</span> <span class="token function">url</span><span class="token punctuation">(</span>\`_button1.<span class="token property">less</span><span class="token punctuation">:</span>&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这里的路径写的是相对路径</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">body</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> 1024px<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 上面的main.less 编译为 main.css之后，自动生成的代码如下：</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css" data-title="css"><pre><code><span class="line"><span class="token selector">.btn</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">body</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">width</span><span class="token punctuation">:</span> 1024px<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内置函数" tabindex="-1"><a class="header-anchor" href="#内置函数"><span>内置函数</span></a></h3><p>less 里有一些内置的函数，这里讲一下 lighten 和 darken 这两个内置函数。</p><p>main.less:</p><div class="language-less line-numbers-mode" data-highlighter="prismjs" data-ext="less" data-title="less"><pre><code><span class="line"><span class="token selector">body</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">lighten</span><span class="token punctuation">(</span>#000<span class="token punctuation">,</span> 10%<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 让黑色变亮 10%</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">darken</span><span class="token punctuation">(</span>#fff<span class="token punctuation">,</span> 10%<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 让白色变暗 10%</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 上面的 main.less 编译为 main.css 之后，自动生成的代码如下：</p><p>main.css：</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css" data-title="css"><pre><code><span class="line"><span class="token selector">body</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background-color</span><span class="token punctuation">:</span> #1a1a1a<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> #e6e6e6<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果还有什么不懂的，可以看 api 文档，在上面的第二段附上了链接。</p><h2 id="在-index-html中直接引用-less-js" tabindex="-1"><a class="header-anchor" href="#在-index-html中直接引用-less-js"><span>在 index.html中直接引用 less.js</span></a></h2><ul><li><p>做法一：写完 less文件后，将其编译为 css 文件，然后在代码中引用css文件。</p></li><li><p>做法二：在代码中直接用引用 less 文件。</p></li></ul><p>产品上线后，当然是使用做法一，因为做法二会多出编译的时间。</p><p>平时开发或演示demo的时候可以用做法二。</p><p>这一段，我们讲一下做法二，其实是浏览器在本地在线地把 less 文件转换为 css 文件。</p><p>（1）在 less 官网下载 less.js 文件：</p><p><img src="http://img.smyhvae.com/20180226_2131.png" alt=""></p><p>把下载好的文件放在工程文件的lib文件夹里：</p><p><img src="http://img.smyhvae.com/20180226_2143.png" alt=""></p><p>（2）在 index.html 中引入 less.js 和我们自己写的 main.less。位置如下：</p><p><img src="http://img.smyhvae.com/20180226_2145.png" alt=""></p><p>copy 红框那部分的代码如下：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet/less<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../main.less<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们可以在打开的网页中，通过控制台看到效果：</p><p><img src="http://img.smyhvae.com/20180226_2150.png" alt=""></p><p>注意，我们要在服务器中打开 html 文件，否则，看不到效果。</p><p>这里也告诉了我们：</p><blockquote><p>不提倡将 less 引入页面，因为 less 需要编译，因此你就需要再引入一个less.js, 多了一个HTTP 请求，同时当浏览器禁用了 js 你的样式就不起作用了，less 编译应该在服务端或使用 grunt 自动编译。</p></blockquote><p>工程文件：（我引用的less.js版本是 2.5.3）</p><ul><li><a href="https://github.com/qianguyihao/web-resource/blob/main/project/2018-02-27-LessDemo.rar" target="_blank" rel="noopener noreferrer">2018-02-27-LessDemo.rar</a></li></ul><p>参考链接：</p><ul><li><a href="https://www.zhihu.com/question/26075208" target="_blank" rel="noopener noreferrer">知乎 | less文件如何引入页面</a></li></ul><h2 id="less-的编译" tabindex="-1"><a class="header-anchor" href="#less-的编译"><span>less 的编译</span></a></h2><p>less 的编译指的是将写好的 less 文件 生成为 css 文件。</p><p>less 的编译，依赖于 NodeJS 环境。因此，我们需要先安装 NodeJS。</p><h3 id="_1、安装-node-js" tabindex="-1"><a class="header-anchor" href="#_1、安装-node-js"><span>1、安装 Node.js</span></a></h3><p>去 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener noreferrer">Node.js</a>的官网下载安装包：</p><p><img src="http://img.smyhvae.com/20180226_2153.png" alt=""></p><p>一路 next 进行安装。</p><p>安装完成后，配置环境变量：</p><p>在 path 变量中追加安装路径：<code>;C:\\Program Files\\nodejs</code>。重启资源管理器，即可生效。</p><p>PS：我发现，我安装的 node.js v8.9.4 版本，已经自动添加了环境变量。</p><p>在 cmd 命令行，输入<code>node.exe -v</code>，可以查看 node.js 的版本。</p><h3 id="_2、安装-less-的编译环境" tabindex="-1"><a class="header-anchor" href="#_2、安装-less-的编译环境"><span>2、安装 less 的编译环境</span></a></h3><p>将 <a href="http://download.csdn.net/download/smyhvae/10260414" target="_blank" rel="noopener noreferrer">npm.zip</a> 解压，将解压后的文件拷贝到路径<code>C:\\Users\\smyhvae\\AppData\\Roaming\\npm</code>下：</p><p><img src="http://img.smyhvae.com/20180226_2212.png" alt=""></p><p>然后重启资源管理器（或者重启电脑）。在 cmd 中输入 <code>lessc</code>，如果能看到下面的效果，说明 less 编译环境安装成功：</p><p><img src="http://img.smyhvae.com/20180226_2217.png" alt=""></p><p>如果你用的是 linux 系统，可以输入下面的命令安装：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">    <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token function">less</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3、将-less-文件编译为-css-文件" tabindex="-1"><a class="header-anchor" href="#_3、将-less-文件编译为-css-文件"><span>3、将 less 文件编译为 css 文件</span></a></h3><p>在 less 所在的路径下，输入 <code>lessc xxx.less</code>，即可编译成功。或者，如果输入 <code>lessc xxx.less &gt; ..\\xx.css</code>，表示输出到指定路径。</p><h2 id="我的公众号" tabindex="-1"><a class="header-anchor" href="#我的公众号"><span>我的公众号</span></a></h2>`,115)),n("p",null,[s[1]||(s[1]=a("想学习")),t(e,{color:"#0000ff"},{default:c(()=>s[0]||(s[0]=[n("strong",null,"更多技能",-1)])),_:1}),s[2]||(s[2]=a("？不妨关注我的微信公众号：")),s[3]||(s[3]=n("strong",null,"千古壹号",-1)),s[4]||(s[4]=a("（id：")),s[5]||(s[5]=n("code",null,"qianguyihao",-1)),s[6]||(s[6]=a("）。"))]),s[8]||(s[8]=n("p",null,"扫一扫，你将发现另一个全新的世界，而这将是一场美丽的意外：",-1)),s[9]||(s[9]=n("p",null,[n("img",{src:"http://img.smyhvae.com/2016040102.jpg",alt:""})],-1))])}const k=l(d,[["render",u],["__file","03-Less详解.html.vue"]]),b=JSON.parse('{"path":"/Frontend/09-%E7%A7%BB%E5%8A%A8Web%E5%BC%80%E5%8F%91/03-Less%E8%AF%A6%E8%A7%A3.html","title":"03-Less详解","lang":"en-US","frontmatter":{"title":"03-Less详解","publish":true},"headers":[{"level":2,"title":"CSS 预处理器","slug":"css-预处理器","link":"#css-预处理器","children":[{"level":3,"title":"为什么要有 CSS 预处理器","slug":"为什么要有-css-预处理器","link":"#为什么要有-css-预处理器","children":[]},{"level":3,"title":"什么是 CSS 预处理器","slug":"什么是-css-预处理器","link":"#什么是-css-预处理器","children":[]}]},{"level":2,"title":"less 的介绍","slug":"less-的介绍","link":"#less-的介绍","children":[]},{"level":2,"title":"less 的语法","slug":"less-的语法","link":"#less-的语法","children":[{"level":3,"title":"注释","slug":"注释","link":"#注释","children":[]},{"level":3,"title":"定义变量","slug":"定义变量","link":"#定义变量","children":[]},{"level":3,"title":"使用嵌套","slug":"使用嵌套","link":"#使用嵌套","children":[]},{"level":3,"title":"Mixin","slug":"mixin","link":"#mixin","children":[]},{"level":3,"title":"Import","slug":"import","link":"#import","children":[]},{"level":3,"title":"内置函数","slug":"内置函数","link":"#内置函数","children":[]}]},{"level":2,"title":"在 index.html中直接引用 less.js","slug":"在-index-html中直接引用-less-js","link":"#在-index-html中直接引用-less-js","children":[]},{"level":2,"title":"less 的编译","slug":"less-的编译","link":"#less-的编译","children":[{"level":3,"title":"1、安装 Node.js","slug":"_1、安装-node-js","link":"#_1、安装-node-js","children":[]},{"level":3,"title":"2、安装 less 的编译环境","slug":"_2、安装-less-的编译环境","link":"#_2、安装-less-的编译环境","children":[]},{"level":3,"title":"3、将 less 文件编译为 css 文件","slug":"_3、将-less-文件编译为-css-文件","link":"#_3、将-less-文件编译为-css-文件","children":[]}]},{"level":2,"title":"我的公众号","slug":"我的公众号","link":"#我的公众号","children":[]}],"git":{"updatedTime":1735788687000,"contributors":[{"name":"Jasmine Mo","username":"Jasmine Mo","email":"loxluthor@gmail.com","commits":1,"url":"https://github.com/Jasmine Mo"}]},"filePathRelative":"Frontend/09-移动Web开发/03-Less详解.md"}');export{k as comp,b as data};
