import{_ as s,c as a,e as p,o as t}from"./app-gihhjKhR.js";const e={};function l(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h2 id="浏览器渲染过程" tabindex="-1"><a class="header-anchor" href="#浏览器渲染过程"><span>浏览器渲染过程</span></a></h2><p><img src="https://img.smyhvae.com/20210114_2115.png" alt=""></p><ol><li><p>浏览器解析 HTML，生成 DOM Tree（Parse HTML）。</p></li><li><p>浏览器解析 CSS，生成 CSSOM（CSS Object Model）Tree。</p></li><li><p>JavaScript 会通过 DOM API 和 CSSOM API 来操作 DOM Tree 和 CSS Rule Tree，浏览器将 DOM Tree 和 CSSOM Tree 合成渲染树（Render Tree）。</p></li><li><p>布局（Layout）：根据生成的 Render Tree，进行回流，以计算每个节点的几何信息（位置、大小、字体样式等等）。</p></li><li><p>绘制（Painting）：根据渲染树和回流得到的几何信息，得到每个节点的绝对像素。</p></li><li><p>展示（Display）：将像素发送给图形处理器（GPU），展示在页面上。</p></li></ol><h2 id="页面渲染技术方案总览" tabindex="-1"><a class="header-anchor" href="#页面渲染技术方案总览"><span>页面渲染技术方案总览</span></a></h2><p><strong>服务端渲染</strong>：</p><ul><li>后端同步渲染、同构直出、BigPipe。</li></ul><p><strong>客户端渲染</strong>：</p><ul><li><p>JavaScript 渲染：静态化、前后端分离、单页面应用</p></li><li><p>Web App：React、Vue、PWA</p></li><li><p>Hybrid App：PhoneGap 、AppCan 等</p></li><li><p>跨平台开发：RN 、Flutter 、小程序等。</p></li><li><p>原生 App：iOS 、Android</p></li></ul><p>建议：</p><ul><li>依赖业务形式、依赖团队规模、依赖技术水平。</li></ul><h2 id="静态化技术方案" tabindex="-1"><a class="header-anchor" href="#静态化技术方案"><span>静态化技术方案</span></a></h2><p>静态化是使动态化的网站生成静态 HTML 页面以供用户更好访问的技术，一般分为纯动态化和伪动态化。</p><p>技术优势：</p><ul><li><p>提高了页面访问速度，降低了服务器的负担，因为访问页面时不需要每次去访问数据库。</p></li><li><p>提高网站内容被搜索引擎搜索到的几率，因为搜索引擎更喜欢静态页面。</p></li><li><p>网站更稳定，如果后端程序、数据库出现问题，会直接影响网站的正常访问，而静态化页面有缓存，更不容易出现问题。</p></li></ul><p>技术不足：</p><ul><li><p>服务器存储占用问题，因为页面量级在增加，要占用大量硬盘空间。</p></li><li><p>静态页面中的链接更新问题会有死链或者错误链接问题。</p></li></ul><p>技术实现：</p><ul><li><p>跑定时任务，将已有的动态内容进行重定，生成静态的 HTML 页面。</p></li><li><p>利用模板技术，将模板引擎中模板字符替换为从数据库字段中取出来的值， 同时生成 HTML 文件。</p></li></ul><p>协作方式：</p><ul><li><p>前端统一写好带有交互的完整静态页面。</p></li><li><p>后端拆分出静态页面文件，并嵌套在后端模板文件中。</p></li></ul><p>选型建议：后端研发人员充分，又需要考虑用户体验、服务器负载的业务。</p><h2 id="前后端分离技术与实现" tabindex="-1"><a class="header-anchor" href="#前后端分离技术与实现"><span>前后端分离技术与实现</span></a></h2><p>前后端分离是指研发人员分离、业务代码分离、后端实现业务接口，前端渲染页面。</p><p>技术实现：</p><ul><li><p>后端只负责功能接口实现，提供按照约定的数据格式并封装好的 API 接口。</p></li><li><p>前端负责业务具体实现，获取到 API 接口数据后，进行页面模板拼接和渲染，独立上线。</p></li></ul><p>协作方式：</p><ul><li><p>前端负责实现页面前端交互，根据后端 API 接口拼装前端模板。</p></li><li><p>后端专注于业务功能实现和 API 接口封装。</p></li></ul><p>技术优势：</p><ul><li><p>团队更加专注</p></li><li><p>提升了开发效率</p></li><li><p>增加代码可维护性</p></li></ul><p>技术架构：</p><ul><li><p>后端架构：Java、C++、PHP、 + Nginx，使用微服务（比如 Dubbo 等）等实现业务的解耦，所有的服务使用某种协议提供不同的服务（比如 JSF 等） 。</p></li><li><p>前端架构：使用 Angular、React、Vue 前端框架并部署页面至 CDN。</p></li><li><p>前端架构 2：使用 Angular、React、Vue 前端框架并部署在 Node Server。</p></li></ul><p>技术不足：</p><ul><li><p>因为前端需要负责一大部分业务逻辑实现，和服务端同步、静态化，需要前端人力非常多。</p></li><li><p>页面数据异步渲染，不利于 SEO，搜索引擎更喜欢纯静态页面。</p></li></ul><p>选型建议：</p><ul><li>这是大型互联网公司正在采用的开发模式，一句话，如果考虑用户体验，以及前端人力够用，就可以积极采用。</li></ul><h2 id="单页面应用技术方案" tabindex="-1"><a class="header-anchor" href="#单页面应用技术方案"><span>单页面应用技术方案</span></a></h2><p>单页应用（single-page application，缩写 SPA），通过动态重写当前页面，来与用户交互，而非传统的从服务器重新加载整个新页面。这种方法在使用过程中不需要重新加载页面，避免了页面之间切换打断用户体验，使应用程序更像一个桌面应用程序。</p><p>技术优点：</p><ul><li><p>不错的加载速度：用户往往感觉页面加载非常快，因为一进入页面就能看到页面元素；</p></li><li><p>良好的交互体验：进行局部渲染，避免不必要的页面间跳转和重复渲染；</p></li><li><p>前后端职责分离：前端进行页面交互逻辑，后端负责业务逻辑；</p></li><li><p>减轻服务器负载：服务器只处理数据接口输出，不用考虑页面模板渲染和 HTML 展示。</p></li></ul><p>技术缺点：</p><ul><li><p>开发成本相对较高</p></li><li><p>首次页面加载时间过多</p></li><li><p>SEO 难度比较大</p></li></ul><p>技术实现：</p><ul><li>使用 React、Vue 框架可以很好的。</li></ul><h2 id="bigpipe-简介和工作模式" tabindex="-1"><a class="header-anchor" href="#bigpipe-简介和工作模式"><span>BigPipe 简介和工作模式</span></a></h2><p>BigPipe 通过将页面加载到称为 Pagelet 的小部件中，来加快页面渲染速度，并允许浏览器在 PHB 服务器呈现页面的同时，一直请求页面不同区块的结构，类似一个“流”传输管道。</p><p><strong>技术实现</strong>：</p><ol><li><p>浏览器从服务器请求页面。</p></li><li><p>Server 迅速呈现一个包含 <code>&lt;head&gt;</code> 标记的页面框架，以及一个包含空 div 元素的主体，这些元素充当 Pagelet 的容器。由于该页面尚未完成，因此与浏览器的 HTTP 连接保持打开状态。</p></li><li><p>浏览器将开始下载 bigpipe.js 文件，然后它将开始呈现页面。</p></li><li><p>PHP 服务器进程仍在执行，并且一次构建每个 Pagelet 。Pagelet 完成后，其结果将在<code>&lt;script&gt; BigPipe.onArrive（…）&lt;/ script&gt;</code> 标记内发送到浏览器。</p></li><li><p>浏览器将收到的 html 代码注入正确的位置。如果小页面需要任何 CSS 资源，则也将下载这些 CSS 资源。</p></li><li><p>接收完所有的页面集之后，浏览器将开始加载那些页面集所需的所有外部 JavaScript 文件。</p></li><li><p>下载 JavaScript 后，浏览器将执行所有内联 JavaScript。</p></li></ol><h2 id="同构直出技术方案" tabindex="-1"><a class="header-anchor" href="#同构直出技术方案"><span>同构直出技术方案</span></a></h2><p>一套代码既可以在服务端运行又可以在客户端运行，这就是同构（Universal）。</p><p>技术优势：</p><ul><li><p>性能: 降低首屏渲染时间</p></li><li><p>SEO: 服务端渲染对搜索引擎的爬取有着天然的优势</p></li><li><p>兼容性: 有效规避客户端兼容性问题，比如白屏</p></li><li><p>代码同构：直接上线两个版本，利于灾备。</p></li></ul><p>技术实现：</p><ul><li><p>next.js：服务器端渲染 React 组件框架（参考查看：https://nextjs.org/）, React 采用 ReactDOMServer 调用 renderToString() 方法。</p></li><li><p>gatsbyjs：服务端 React 渲染框架（参考查看： https://www.gatsbyjs.org/）。</p></li><li><p>nuxt.js：服务器端渲染 Vue 组件框架（参考查看：https://nuxtjs.org/）, Vue 采用 vue-server-renderer 调用 renderToString() 方法。</p></li></ul><p>协作方式：</p><ul><li><p>后端专注于业务功能实现和 API 接口封装。</p></li><li><p>前端负责实现页面前端交互，根据后端 API 接口拼装前端模板，页面渲染，以及服务器维护。</p></li></ul><p>选型建议：</p><ul><li><p>前端要处理 Node server 的机器环境、代码部署、日志、容灾、监控等以往后端人员需要具备运维知识，前端人员的综合能力要求会比以往要高。</p></li><li><p>前端项目开发周期变长了，需要事先和产品、运营沟通排期问题。</p></li></ul><h2 id="pwa-技术方案和实现思路" tabindex="-1"><a class="header-anchor" href="#pwa-技术方案和实现思路"><span>PWA 技术方案和实现思路</span></a></h2><p>Progressive Web App，简称 PWA，PWA 应用是使用特定技术和标准模式来开发的 Web 应用，这将同时赋予它们 Web 应用和原生应用的特性。</p><p>技术优势：</p><ul><li><p>用户可以用手机屏幕启动应用，即使在离线状态或者弱网下，通过事先缓存的资源，也可正常加载运行当前应用，可以完全消除对网络的依赖，从而给用户非常可靠的体验。</p></li><li><p>因为预先缓存了资源，部分资源无须经过网络，即秒开页面。</p></li><li><p>和移动设备上的原生应用一样，具有沉浸式的用户体验。</p></li><li><p>可以给用户发送离线推送消息。</p></li></ul><p>技术实现：</p><ul><li><p>全站改造成 HTTPS，没有 HTTPS 就没有 Service Worker。</p></li><li><p>应用 Service Worker 技术提升性能，离线提供静态资源文件，提升首屏用户体验。</p></li><li><p>使用 App Manifest。</p></li><li><p>最后可以考虑离线消息推送等功能。</p></li></ul><p>浏览器兼容性：</p><ul><li><p>ServiceWorkerGlobalScope API：88%</p></li><li><p>Web App Manifest 83%</p></li></ul><h2 id="页面加载策略优化" tabindex="-1"><a class="header-anchor" href="#页面加载策略优化"><span>页面加载策略优化</span></a></h2><ul><li><p>懒加载</p></li><li><p>预加载</p></li><li><p>预渲染</p></li><li><p>按需加载</p></li></ul><p>下面具体展开讲讲。</p><h3 id="懒加载" tabindex="-1"><a class="header-anchor" href="#懒加载"><span>懒加载</span></a></h3><p>懒加载也叫延迟加载，指的是长网页中延迟加载特定元素（可以是图片，也可以是 JS/CSS 文件，当然也可以是 JavaScript 的特定函数和方法，以下简称“懒加载元素”）。</p><p>好处：可以减少当前屏无效资源的加载。</p><p>技术实现举例：把页面上“懒加载元素”src 属性设置为空字符，把真实的 src 属性写在 data-lazy 属性中，当页面滚动的时候监听 scroll 事件，如果“懒加载元素”在可视区域内，就把图片的 src 属性或者文件 URL 路径设置成 data-lazy 属性值。</p><h3 id="预加载" tabindex="-1"><a class="header-anchor" href="#预加载"><span>预加载</span></a></h3><p>可以使用预加载让浏览器来预先加载某些资源（比如图片、JS/CSS/模板），而这些资源是在将来才会被使用到的。简单来说，就是将所需资源提前加载到浏览器本地，这样后面在需要使用的时候就可以直接从浏览器缓存中取了，而不用再重新开始加载。</p><p>使用场景：如果你希望这个资源能尽快显示给用户，就可以使用预加载。</p><p>好处：减少用户后续加载资源等待的时间。</p><p><strong>技术实现举例</strong>：</p><ol><li>HTML 标签：</li></ol><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://xxx.jpg<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> none</span><span class="token punctuation">&quot;</span></span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2、使用 Image 对象：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">image<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;https://xxx.jpg&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、使用 preload、prefetch 和 preconnect：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“preload”</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“src/style.css”</span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“style”</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scr/image.png<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dns-prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://my.com<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preconnect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://my.com<span class="token punctuation">&quot;</span></span> <span class="token attr-name">crossorigin</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="预渲染" tabindex="-1"><a class="header-anchor" href="#预渲染"><span>预渲染</span></a></h3><p>有一种预加载组件的方式就是提前渲染它。在页面中渲染组件，但是并不在页面中展示。也就是渲染完成后，先隐藏起来，用的时候再展示。</p><p>实现举例：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prerender<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://my.com<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="按需加载" tabindex="-1"><a class="header-anchor" href="#按需加载"><span>按需加载</span></a></h3><ul><li><p>常规按需加载（如 JS 原生、jQuery）</p></li><li><p>不同 App 按需加载（如 JS-SDK 脚本文件）</p></li><li><p>不同设备按需加载（如 PC 端和 HTML5 端样式文件）</p></li><li><p>不同分辨率按需加载（CSS Media Query）</p></li></ul><p>React 异步加载举例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">componentA</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">location<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;modules/componentA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;componentA&#39;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">componentB</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">location<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;modules/componentB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;componentB&#39;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">&lt;</span>Router history<span class="token operator">=</span><span class="token punctuation">{</span>history<span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>App<span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;componentA&quot;</span> getComponent<span class="token operator">=</span><span class="token punctuation">{</span>componentA<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;componentB&quot;</span> getComponent<span class="token operator">=</span><span class="token punctuation">{</span>componentB<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vue 异步加载举例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">componentA</span> <span class="token operator">=</span> <span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;src/a.vue&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">componentB</span> <span class="token operator">=</span> <span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;src/b.vue&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&quot;a”,name:&quot;</span><span class="token operator">/</span>a”<span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>componentA<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&quot;b”,name:&quot;</span><span class="token operator">/</span>b”<span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>componentB<span class="token punctuation">}</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">router</span><span class="token operator">:</span> router<span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="接口服务调用优化" tabindex="-1"><a class="header-anchor" href="#接口服务调用优化"><span>接口服务调用优化</span></a></h2><p>1、接口合并：一个页面的众多业务接口和依赖的第三方接口，合并为一个部署在集群的接口统一调用，以减少页面接口请求数。</p><p>2、接口上 CDN：主要基于接口性能考虑，我们可以把<strong>不需要实时更新的接口同步至 CDN</strong>，等此接口内容变更之后自动同步至 CDN 集群上。如果一定时间内未请求到数据，会用源站接口再次请求。</p><p>3、接口域名上 CDN：增强可用性、稳定性。</p><p>4、接口降级：核心接口进行降级用基础接口进行业务实现，比如千人千面的推荐接口，在大促时间点可以直接运营编辑的数据。另外如果接口无访问，建议使用兜底数据。</p><p>5、接口监控：监控接口成功率，不只是常说的 TP99，也包括弱网、超时、网络异常、网络切换等一段情况的监控情况。排查出来问题后，需要联合后端、运维、网络岗位人员一并解决。</p><h2 id="接口缓存策略优化" tabindex="-1"><a class="header-anchor" href="#接口缓存策略优化"><span>接口缓存策略优化</span></a></h2><p>1、Ajax/fetch 缓存：前端请求时候带上 cache，依赖浏览器本身缓存机制。</p><p>2、本地缓存：异步接口数据优先使用本地 localStorage 中的缓存数据。</p><p>3、多次请求：接口数据本地无 localStorage 缓存数据，重新再次发出 ajax 请求。</p>`,103)]))}const c=s(e,[["render",l],["__file","05-页面渲染性能优化.html.vue"]]),u=JSON.parse('{"path":"/Frontend/14-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/05-%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html","title":"05-页面渲染性能优化","lang":"en-US","frontmatter":{"title":"05-页面渲染性能优化","publish":true},"headers":[{"level":2,"title":"浏览器渲染过程","slug":"浏览器渲染过程","link":"#浏览器渲染过程","children":[]},{"level":2,"title":"页面渲染技术方案总览","slug":"页面渲染技术方案总览","link":"#页面渲染技术方案总览","children":[]},{"level":2,"title":"静态化技术方案","slug":"静态化技术方案","link":"#静态化技术方案","children":[]},{"level":2,"title":"前后端分离技术与实现","slug":"前后端分离技术与实现","link":"#前后端分离技术与实现","children":[]},{"level":2,"title":"单页面应用技术方案","slug":"单页面应用技术方案","link":"#单页面应用技术方案","children":[]},{"level":2,"title":"BigPipe 简介和工作模式","slug":"bigpipe-简介和工作模式","link":"#bigpipe-简介和工作模式","children":[]},{"level":2,"title":"同构直出技术方案","slug":"同构直出技术方案","link":"#同构直出技术方案","children":[]},{"level":2,"title":"PWA 技术方案和实现思路","slug":"pwa-技术方案和实现思路","link":"#pwa-技术方案和实现思路","children":[]},{"level":2,"title":"页面加载策略优化","slug":"页面加载策略优化","link":"#页面加载策略优化","children":[{"level":3,"title":"懒加载","slug":"懒加载","link":"#懒加载","children":[]},{"level":3,"title":"预加载","slug":"预加载","link":"#预加载","children":[]},{"level":3,"title":"预渲染","slug":"预渲染","link":"#预渲染","children":[]},{"level":3,"title":"按需加载","slug":"按需加载","link":"#按需加载","children":[]}]},{"level":2,"title":"接口服务调用优化","slug":"接口服务调用优化","link":"#接口服务调用优化","children":[]},{"level":2,"title":"接口缓存策略优化","slug":"接口缓存策略优化","link":"#接口缓存策略优化","children":[]}],"git":{"updatedTime":1735788687000,"contributors":[{"name":"Jasmine Mo","username":"Jasmine Mo","email":"loxluthor@gmail.com","commits":1,"url":"https://github.com/Jasmine Mo"}]},"filePathRelative":"Frontend/14-前端性能优化/05-页面渲染性能优化.md"}');export{c as comp,u as data};
