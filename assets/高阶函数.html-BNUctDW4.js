import{_ as s,c as a,e,o as p}from"./app-gihhjKhR.js";const t={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h2 id="高阶函数" tabindex="-1"><a class="header-anchor" href="#高阶函数"><span>高阶函数</span></a></h2><h3 id="高阶函数的概念" tabindex="-1"><a class="header-anchor" href="#高阶函数的概念"><span>高阶函数的概念</span></a></h3><p>当 函数 A 接收函数 B 作为<strong>参数</strong>，或者把函数 C 作为<strong>返回值</strong>输出时，我们称 函数 A 为高阶函数。</p><p>通俗来说，高阶函数是 对其他函数进行操作 的函数。</p><h3 id="高阶函数举例1-把其他函数作为参数" tabindex="-1"><a class="header-anchor" href="#高阶函数举例1-把其他函数作为参数"><span>高阶函数举例1：把其他函数作为参数</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 执行完上面的 console.log() 语句之后，再执行下面这个 callback 函数。也就是说，这个 callback 函数是最后执行的。</span></span>
<span class="line">    callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是最后执行的函数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">30</span>
<span class="line">我是最后执行的函数</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="高阶函数举例2-把其他区函数作为返回值" tabindex="-1"><a class="header-anchor" href="#高阶函数举例2-把其他区函数作为返回值"><span>高阶函数举例2：把其他区函数作为返回值</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行 fn1() 之后，会得到一个返回值。这个返回值是函数</span></span>
<span class="line"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码，产生了闭包现象。关于闭包，详见下一篇文章《JavaScript基础/闭包.md》。</p>`,11)]))}const o=s(t,[["render",l],["__file","高阶函数.html.vue"]]),u=JSON.parse('{"path":"/Frontend/07-JavaScript%E8%BF%9B%E9%98%B6/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0.html","title":"25-高阶函数","lang":"en-US","frontmatter":{"title":"25-高阶函数","publish":true},"headers":[{"level":2,"title":"高阶函数","slug":"高阶函数","link":"#高阶函数","children":[{"level":3,"title":"高阶函数的概念","slug":"高阶函数的概念","link":"#高阶函数的概念","children":[]},{"level":3,"title":"高阶函数举例1：把其他函数作为参数","slug":"高阶函数举例1-把其他函数作为参数","link":"#高阶函数举例1-把其他函数作为参数","children":[]},{"level":3,"title":"高阶函数举例2：把其他区函数作为返回值","slug":"高阶函数举例2-把其他区函数作为返回值","link":"#高阶函数举例2-把其他区函数作为返回值","children":[]}]}],"git":{"updatedTime":1735788687000,"contributors":[{"name":"Jasmine Mo","username":"Jasmine Mo","email":"loxluthor@gmail.com","commits":1,"url":"https://github.com/Jasmine Mo"}]},"filePathRelative":"Frontend/07-JavaScript进阶/高阶函数.md"}');export{o as comp,u as data};
